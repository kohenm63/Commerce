[]Inline Formsets | Django (3.0) Crash Course Tutorials (pt 11)
      https://www.youtube.com/watch?v=MRWFg30FmZQ

[]
#  print('Bid must be greater than or equal to a price!')
    #  print("The highest bid so far is:", winner)
    #  filter("-item.title")
    #  if bid < price:
    #      print('Bid must be greater than or equal to a price!')
    #  else:
    #    print('Your bid has been submitted')


class Bids(models.Model):
    bidder = models.ForeignKey(
        User, on_delete=models.CASCADE, null=True, blank=True)
    bid = models.ForeignKey(
        Auction_Listings, on_delete=models.CASCADE, null=True, blank=True)

    date = models.DateTimeField(default=django.utils.timezone.localtime)
    item = models.ForeignKey(
        Auction_Listings, on_delete=models.CASCADE, null=True, related_name="item")

    def __str__(self):
        return f"{self.id},{self.date},{self.bid},{self.bidder}"

DB:
https://fanart.tv/fanart/music/f6af669a-56ea-448a-a044-de76181ada33/cdart/lace-up-50bd742ad37cc.png
https://www.pngplay.com/wp-content/uploads/6/Ultra-Boost-Adidas-Shoes-PNG.png
http://www.art-decal.com.sg/gallery/8baa39aa635eed3c_umbrella-rat-banksy-stencil_thumb.png


<!-- {%if user == seller %}
<a href="{% url 'new_bid' %}" class=" btn btn-primary" disabled>Auction on thid item is closed</a>

{%elseif%} -->



def winner(request,bids, n,listing_id):
    listing = Auction_Listings.objects.get(pk=listing_id)
    bids = Bids.objects.order_by('item')
    winner = bids[0]

    for i in range(1, n):
            if bids[i] > winner:
                            winner = bids[i]
    print(winner)
    return render(request, "auctions/listing.html",
                        {
                            'winner': winner ,
                            'lisitng':listing
                        })


# path("categories", Categories.as_view(), name='categories'),


********************watchlist**********************************

# watch list
# @login_required
# def add_to_watchlist(request,listing_id):
#     listing = get_object_or_404(Listing, pk=listing_id)
#     #check if the item is already in the list!
#     if listing.watchlist.filter(id=request.user.id).exists():
#         #if exists => remove the item fron the watchlist
#         listing.watchlist.remove(request.user)
#     else:
#         #add the item to the watchlist
#         listing.watchlist.add(request.user)
#     return render(request, "auctions/watchlist.html", {
#         "watchlist": watchlist
#     })


# @login_required
# def watchlist(request):
#     watchlist = Listing.newmanager.filer(watchlist=request.user)
    
#     context = {'watchlist': watchlist}
#     return render(request, "auctions/watchlist.html", context)

#############################################################

<h2>{{bids|length}} bid(s) so far</h2>
<h3> Bids:</h3>

{%if bids%}
{%for bid in bids%}
<strong>{{ bid.item.title }}</strong>
<br>
 {{ bid.bid }}by {{bid.bidder}} on {{bid.date}}
<br>

{%endfor %}

{%else %}
<alert class="alert alert-warning">No bids on this item yet</alert>
{%endif%}

<!-- <h5>Highest Bids</h5>
{%if winners%}
{%for winner in winners%}
<strong>{{ bid.winner }}</strong>
{%endfor %}
{%endif%} -->


#########################################

#if user is admin => user == user.is_superuser
# @ login_required
# def new_bid(request,listing_id):
#    listing = get_object_or_404(Auction_Listings, id=listing_id)    
#    bids = Bid.objects.filter(id=request.user.id)
# #    bid = listing.bids.filter(id=request.user.id)
#    winner=Bid.objects.all().aggregate(Max('bid'))
#    bid_form = BidForm(data=request.POST)
#    user_bid = None
#    if request.method == "POST":
#        bid_form = BidForm(request.POST, )
#        if bid_form.is_valid():
#            user_bid = bid_form.save(commit=True)
#            user_bid.listing = listing
#            bid_form.save()
#            return render(request, "auctions/listing.html",
#                          {
#                              'listing': listing,
#                              'message': 'Your bid is the most recent',
#                                })

#        else:
#            return render(request, "auctions/new_bid.html", {
               
#                'listing': listing,
#                'price': price,
#                'bids': bids,
#                'user_bid': user_bid,
#                'bid_form': BidForm(),
#            })
#    else:
#       return render(request, "auctions/new_bid.html", {
#           "bid_form": BidForm()
          
#       })